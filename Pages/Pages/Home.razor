@page "/"
@using global::Pages.Interfaces
@using System.Text.Json
@using global::Pages.Models.StorageModel
@using Microsoft.JSInterop

@using Radzen.Blazor


@inject NavigationManager Navigation;
@inject IStorage Storage;
@inject IJSRuntime JS;
@inject IFileWorker FW;

<RadzenRow AlignItems="AlignItems.Center" Gap="0" style="padding: 8px; text-align: center">
    <RadzenColumn>
        <RadzenButton style="background-color: #376cbb; color: black;" Click="Add"> افزودن </RadzenButton>
    </RadzenColumn>

    <RadzenColumn>
        <RadzenButton style="background-color: #376cbb; color: black;" Click="Input"> از فایل </RadzenButton>
    </RadzenColumn>

    <RadzenColumn>
        <RadzenButton style="background-color: red; margin: 2px;" Click="() => {CanDelete = !CanDelete;}">
            <RadzenIcon Icon="delete" />
        </RadzenButton>
    </RadzenColumn>

</RadzenRow>
<RadzenDataList Data="@ExercisePrograms" TItem="CustomProgram" PagerHorizontalAlign="HorizontalAlign.Right" ShowPagingSummary="true">
    <Template Context="EP">
        <RadzenRow AlignItems="AlignItems.Center" Gap="0" style="padding: 8px;">
            <RadzenColumn>
                <RadzenText TextAlign="TextAlign.Center" TextStyle="TextStyle.H6" TagName="TagName.H5" Class="rz-mb-0">@EP.Name</RadzenText>
            </RadzenColumn>

            <RadzenButton style="background-color: #30363d; margin: 2px;" Click="() => View(EP.Id)">
                <RadzenIcon Icon="visibility" />
            </RadzenButton>

            <RadzenButton style="background-color: #30363d; margin: 2px;" Click="() => ViewCurrentDay(EP.Id)">
                <RadzenIcon Icon="format_list_bulleted" />
            </RadzenButton>

            <RadzenButton style="background-color: red; margin: 2px;" Visible="@CanDelete" Click="() => Delete(EP.Id)">
                <RadzenIcon Icon="delete" />
            </RadzenButton>

            <RadzenButton style="background-color: #30363d; margin: 2px;" Click="() => Send(EP.Id)">
                <RadzenIcon Icon="send" />
            </RadzenButton>
        </RadzenRow>
    </Template>
</RadzenDataList>

<RadzenTextArea class="w-100" Styletyle="word-wrap: break-word;" Value="@ErrorLog" Visible="@(!string.IsNullOrWhiteSpace(ErrorLog))"></RadzenTextArea>

@code
{
    public bool CanDelete = false;

    public List<CustomProgram> ExercisePrograms;

    public string ErrorLog;


    protected override async Task OnInitializedAsync()
    {

        await ReLoad();
        await base.OnInitializedAsync();
    }

    async Task ReLoad() => ExercisePrograms = await Storage.GetExercisePrograms();


    private void View(int Id)
    {
        Navigation.NavigateTo($"/View/{Id}");
    }

    private void ViewCurrentDay(int Id)
    {
        Navigation.NavigateTo($"/ViewCurrentDay/{Id}");
    }


    private void Add()
    {
        Navigation.NavigateTo("/CreateProgram");
    }

    private async Task Delete(int valueId)
    {
        await Storage.RemoveExercisePrograms(valueId);
        await ReLoad();
        CanDelete = false;
    }

    private async Task Send(int Id)
    {
        var result = await Storage.GetExerciseProgram(Id);

        string data = JsonSerializer.Serialize(result);

        await FW.DownloadBackup($"Backup_{Id}.json", data);

    }

    private async Task Input()
    {
        FW.OnUpload += async (string data) =>
        {
            try
            {
                CustomProgram? cp = JsonSerializer.Deserialize<CustomProgram>(data);

                if (cp != null) await Storage.SaveCustomProgram(cp);
            }
            finally
            {
                await ReLoad();
                await InvokeAsync(StateHasChanged);
            }
        };

        await FW.UploadFile();
    }

}